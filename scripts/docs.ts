import glob from 'glob'
import yaml from 'js-yaml'
import tableify from 'markdown-tableify'
import { join } from 'path'
import { readFileSync, writeFileSync } from 'fs'

const read = (path: string) => readFileSync(path, { encoding: 'utf-8' })


const doNotEditDisclaimer: string = [
    '<br /><hr /><br />',
    `Last updated: ${new Date()}`,
    '<br />',
    '<br />',
    '<italic>',
    'This documentation is generated automatically. All changes to this file will be <bold>overwritten</bold>',
    '<br />',
    '<bold>DO NOT edit this file.</bold>',
    '</italic>'
  ].join('')

  const howToUse = (name: string, version: string): string => {
    return `
      ## Usage:
      \`\`\`yaml
      - uses: captego/actions/${name}@master
      
      # or lock to a specific version
      - uses: captego/actions/${name}@v${version}
      \`\`\``
  }
  
const allFiles = glob.sync('**/*.yml', { ignore: ['**/node_modules/**', '**/example/*'] })
const tableHeaders = [
  { name: 'name', align: ':---', title: 'Name' },
  { name: 'required', align: ':---', title: 'Required' },
  { name: 'defaultValue', align: ':---', title: 'Default' },
  { name: 'description', align: ':---', title: 'Description' }
]
allFiles.forEach(file => {
  const { inputs, name, description } = JSON.parse(JSON.stringify(yaml.load(read(file))))

  const values = inputs && Object.keys(inputs)
    .map(name => ({
      name,
      required: inputs[name].required ? '**Yes**' : 'No',
      defaultValue: `\`${inputs[name].default}\`` ?? '',
      description: inputs[name].description ?? ''
    }))

  const table = inputs && tableify(values, { headers: tableHeaders })

  const [folder] = file.split('/')
  const packageName = `${folder}/README.md`
  const outPath = join(__dirname, '..', packageName)

  const content = `# captego/actions/${folder}
${name}
${description}
    
${howToUse(
    folder,
    JSON.parse(readFileSync(join(__dirname, '..', 'package.json'), { encoding: 'utf-8' })).version)
}
${table ? '## Options' : ''}
${table ?? ''}
${doNotEditDisclaimer}
    `

  try {
    writeFileSync(outPath, content, { encoding: 'utf-8' })

    console.error(`ðŸŽ‰ Generated file: ${packageName}`)
  } catch (err) {
    console.error(`ðŸ”¥ Could not write to ${outPath}`)
  }
})

